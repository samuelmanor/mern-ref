{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = [{\n  content: 'reducer defines how redux store works',\n  important: true,\n  id: 1\n}, {\n  content: 'state of store can contain any data',\n  important: false,\n  id: 2\n}];\nconst generateId = () => {\n  Number((Math.random() * 1000000).toFixed(0));\n};\nconst noteSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    createNote(state, action) {\n      const content = action.payload;\n      state.push({\n        content,\n        important: false,\n        id: generateId()\n      });\n    },\n    toggleImportanceOf(state, action) {\n      const id = action.payload;\n      const toChange = state.find(n => n.id === id);\n      const changedNote = {\n        ...toChange,\n        important: !toChange.important\n      };\n      return state.map(n => n.id !== id ? n : changedNote);\n    }\n  }\n});\nexport const {\n  createNote,\n  toggleImportanceOf\n} = noteSlice.actions;\nexport default noteSlice.reducer;\n\n// const noteReducer = (state = initialState, action) => {\n//     switch(action.type) {\n//         case 'NEW_NOTE':\n//             return state.concat(action.payload);\n//         case 'TOGGLE_IMPORTANCE':\n//             const id = action.payload.id;\n//             const noteToChange = state.find(n => n.id === id);\n//             const changedNote = { ...noteToChange, important: !noteToChange.important };\n\n//             return state.map(note => note.id !== id ? note : changedNote);\n//         default:\n//             return state;\n//     };\n// };\n\n// export const createNote = (content) => {\n//     return {\n//         type: 'NEW_NOTE',\n//         payload: {\n//             content,\n//             important: false,\n//             id: generateId()\n//         }\n//     };\n// };\n\n// export const toggleImportanceOf = (id) => {\n//     return {\n//         type: 'TOGGLE_IMPORTANCE',\n//         payload: { id }\n//     };\n// };\n\n// export default noteReducer;","map":{"version":3,"names":["createSlice","initialState","content","important","id","generateId","Number","Math","random","toFixed","noteSlice","name","reducers","createNote","state","action","payload","push","toggleImportanceOf","toChange","find","n","changedNote","map","actions","reducer"],"sources":["/Users/smanor/Development/code/personal/mern-ref/part6/notes/src/reducers/noteReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = [\n    {\n        content: 'reducer defines how redux store works',\n        important: true,\n        id: 1\n    },\n    {\n        content: 'state of store can contain any data',\n        important: false,\n        id: 2\n    }\n];\n\nconst generateId = () => {\n    Number((Math.random() * 1000000).toFixed(0));\n};\n\nconst noteSlice = createSlice({\n    name: 'notes',\n    initialState,\n    reducers: {\n        createNote(state, action) {\n            const content = action.payload;\n            state.push({\n                content,\n                important: false,\n                id: generateId()\n            });\n        },\n        toggleImportanceOf(state, action) {\n            const id = action.payload;\n            const toChange = state.find(n => n.id === id);\n            const changedNote = { ...toChange, important: !toChange.important };\n\n            return state.map(n => n.id !== id ? n : changedNote);\n        }\n    }\n});\n\nexport const { createNote, toggleImportanceOf } = noteSlice.actions;\nexport default noteSlice.reducer;\n\n// const noteReducer = (state = initialState, action) => {\n//     switch(action.type) {\n//         case 'NEW_NOTE':\n//             return state.concat(action.payload);\n//         case 'TOGGLE_IMPORTANCE':\n//             const id = action.payload.id;\n//             const noteToChange = state.find(n => n.id === id);\n//             const changedNote = { ...noteToChange, important: !noteToChange.important };\n\n//             return state.map(note => note.id !== id ? note : changedNote);\n//         default:\n//             return state;\n//     };\n// };\n\n\n\n// export const createNote = (content) => {\n//     return {\n//         type: 'NEW_NOTE',\n//         payload: {\n//             content,\n//             important: false,\n//             id: generateId()\n//         }\n//     };\n// };\n\n// export const toggleImportanceOf = (id) => {\n//     return {\n//         type: 'TOGGLE_IMPORTANCE',\n//         payload: { id }\n//     };\n// };\n\n// export default noteReducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG,CACjB;EACIC,OAAO,EAAE,uCAAuC;EAChDC,SAAS,EAAE,IAAI;EACfC,EAAE,EAAE;AACR,CAAC,EACD;EACIF,OAAO,EAAE,qCAAqC;EAC9CC,SAAS,EAAE,KAAK;EAChBC,EAAE,EAAE;AACR,CAAC,CACJ;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACrBC,MAAM,CAAC,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,OAAO,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;AAED,MAAMC,SAAS,GAAGV,WAAW,CAAC;EAC1BW,IAAI,EAAE,OAAO;EACbV,YAAY;EACZW,QAAQ,EAAE;IACNC,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACtB,MAAMb,OAAO,GAAGa,MAAM,CAACC,OAAO;MAC9BF,KAAK,CAACG,IAAI,CAAC;QACPf,OAAO;QACPC,SAAS,EAAE,KAAK;QAChBC,EAAE,EAAEC,UAAU;MAClB,CAAC,CAAC;IACN,CAAC;IACDa,kBAAkBA,CAACJ,KAAK,EAAEC,MAAM,EAAE;MAC9B,MAAMX,EAAE,GAAGW,MAAM,CAACC,OAAO;MACzB,MAAMG,QAAQ,GAAGL,KAAK,CAACM,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAKA,EAAE,CAAC;MAC7C,MAAMkB,WAAW,GAAG;QAAE,GAAGH,QAAQ;QAAEhB,SAAS,EAAE,CAACgB,QAAQ,CAAChB;MAAU,CAAC;MAEnE,OAAOW,KAAK,CAACS,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAKA,EAAE,GAAGiB,CAAC,GAAGC,WAAW,CAAC;IACxD;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAET,UAAU;EAAEK;AAAmB,CAAC,GAAGR,SAAS,CAACc,OAAO;AACnE,eAAed,SAAS,CAACe,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}